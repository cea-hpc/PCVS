import optparse
import os
import sys
import datetime
import time
import signal
import getpass
import re
from subprocess import Popen,PIPE

# possibly later we can add an HTML class so we can have an option to
# produce an HTML report or a PDF.  Maybe a little silly since web browsers
# can display PDF's but I guess it would make it easier to fetch the individual
# images
class PDF():
  def __init__(self,script,report,title=None,summary=None):
    self.script = script
    self.latex_file = report 
    self.f = open ("%s.%s" % (self.latex_file, "tex"), 'w')
    self.f.write( self.front(summary,title) )

  def escape_underscores(self,str):
    p = re.compile('_')
    return p.sub('\_',str)
  
  def add_graph(self,path):
    self.f.write( "\\begin{figure}\n" )
    self.f.write( "\\includegraphics[width=11in,height=8.5in]{%s}\n" % path )
    self.f.write( "\\end{figure}\n" )
    self.f.write( "\\clearpage\n" )
  
  def compile(self): 
    self.f.write( self.back() )
    self.f.write( "\\end{document}\n" )
    self.f.close()
    return self.build()
  
  def build(self):
    command = "pdflatex %s" % self.latex_file
    env = os.environ
    env['TEXINPUTS'] = "../../styles:.:"
    out,err,ret = run_with_timeout(command,env)
    if len(err):
      print err
    return( "%s.pdf" % self.latex_file ) 

  def front(self,summary=None,title=None):
    header = """\\documentclass[landscape,10pt]{article}
                \\usepackage{appendix}
                \\usepackage[pdftex]{graphicx}
                \\usepackage[margin=0in]{geometry}
                \\begin{document}
             """
    if summary is not None or title is not None:
      header += "\\newgeometry{margin=0.7in}"
      if title is not None:
        author = getpass.getuser() 
        header +="""\\title{%s}\n\\author{%s}\n\\maketitle\n \
                  \\thispagestyle{empty}""" % ( title, author )
      if summary is not None:
        header += summary + "\n"
      header += "\\restoregeometry\n"
      header += "\\clearpage\n"
    return header

  def back(self):
    appendix = "Report generated by %s@%s on %s (epoch %d) \n\\\\\n" % \
            ( getpass.getuser(), os.getenv('HOST'),
            str(datetime.date.today()), int(time.time()) )
    appendix += "Produced by script %s" \
              % self.escape_underscores(self.script)
    f = open( self.script, 'r' )
    appendix += ":\n"
    appendix += "\\begin{verbatim}"
    appendix += f.read() # this doesn't work because of all funny characters
    appendix += "\\end{verbatim}"
    f.close()
    return "\\newgeometry{margin=0.7in}\n\\appendixpage\n%s\n" % appendix 


# little utility function since pos subprocess doesn't have timeout
def run_with_timeout(command,env=os.environ,timeout=4):
  class Alarm(Exception):
    pass
  
  def alarm_handler(signum, frame):
    raise Alarm

  def fail(msg,err):
    print "FAILURE: %s" % msg
    if err is not None: print "STDERR: %s" % err
    print "To diagnose, execute the following:  "
    print "\tcd %s\n\t%s" % ( os.getcwd(), command )
    sys.exit()
  
  print "cd %s\n%s" % (os.getcwd(),command)
  signal.signal(signal.SIGALRM, alarm_handler)
  signal.alarm(timeout)
  ch = Popen([command],shell=True,env=env,stdout=PIPE,stderr=PIPE)
  try:
    out,err = ch.communicate()
    ret = ch.wait()
    signal.alarm(0)
    if ret != 0: fail("Command returned non-zero %d" % ret,err)
    return out,err,ret
  except Alarm:
    fail("Command seems to be hung",None)
  return None,None,None

class Report:
  def __init__(self,title=None,summary=None):
    parser = optparse.OptionParser()
    parser.add_option("-d", dest="dump", default=False, action="store_true",
        help="dump default config values")
    parser.add_option("-o", dest="output", default="output",
        help="output dir [DEFAULT=%default]")
    parser.add_option("-r", dest="report", default="report",
        help="name of report [DEFAULT=%default]")
    parser.add_option("-n",dest="overwrite",action="store_false",default=True,
        help="don't overwrite existing figures [DEFAULT=overwrite]")
    (self.options, args) = parser.parse_args()
    self.outdir = "%s/%s/%s" % (os.getcwd(),self.options.output,
                                str(datetime.date.today()))
    if not os.path.isdir( self.outdir ): os.makedirs( self.outdir, 0777 )
    self.script = "%s/%s" % (os.getcwd(),sys.argv[0])
    os.chdir( '..' )  # go to parent so dbviz.jar can find config files 
    self.graphs=[]
    self.title=title
    self.summary=summary
    self.set_initial_config()
    if self.options.dump is True:
      self.dump_config()
      sys.exit()

  def dump_config(self):
    for key in sorted(self.config):
      print '%15s: %s' % (key, self.config[key])

  def set_initial_config(self):
    self.config = {
      'HostName'       :"",
      'DatabaseName'   :"",
      'UserName'       :"",
      'Password'       :"",
      'TableName'      :"",
      'GraphTitle'     :"",
      'XAxisTitle'     :"",
      'MinX'           :"0",
      'MaxX'           :"",
      'MinY'           :"0",
      'MaxY'           :"",
      'XLog'           :"",
      'YLog'           :"",
      'NumXTickMarks'  :"6",
      'NumYTickMarks'  :"7",
      'AvgMaxMinAll'   :"Average",
#      'AvgMaxMinAll'   :"All",
      'ErrorBars'      :"Standard Deviation",
      'LegendPosition' :"Top Left",
      'Compare'        :"test_type,strided",
      'FormatAsDate'   : "false",
      'XAxis'          : "obj_size",
      'YAxis'          : "total_size_mb/write_total_time_max",
      'Where'          :"user like '' && .... ",
      'GraphWidth'     :"792",
      'GraphHeight'    :"612",
      'FontSize'       :"12",
      'PointSize'      :"10",
    }
  
  def add_graph(self):
    graph_id = len(self.graphs)+1
    graph  = "%s/%s-figure%d.jpg"  % (self.outdir,self.options.report,graph_id)
    config = "%s/%s-config%d.json" % (self.outdir,self.options.report,graph_id)
    self.graphs.append(graph)
    if os.path.exists(graph) and self.options.overwrite is False:
      return
    f = open( config, 'w' )
    f.write("{")
    for key in self.config:
      f.write('"%s":"%s",' % (key, self.config[key]) )
    f.write("}")
    f.close()
    command = "java -Xms64M -Xmx256M -jar dbviz.jar " \
            + "-config %s -output %s -figure %d" \
            % ( config, graph, graph_id )
    out,err,ret = run_with_timeout(command,timeout=20)
    if len(err):
      print "ERROR: " + err

  def compile(self):
    os.chdir(self.outdir)
    document = PDF(self.script,self.options.report,self.title,self.summary)
    for graph in self.graphs:
      document.add_graph(graph)
    return document.compile()
