SHELL      = @SHELL@

srcdir     = @srcdir@
abs_srcdir = @abs_srcdir@
listdir    = @absolute_srcdir@/Test
VPATH      = .:@srcdir@

# See testl for a discussion
testing: newtestl
# testlist2-2l are MPI-2 routines that contain only local test for errors
newtestl:
	if [ ! -d Test ] ; then mkdir Test ; fi
	(cd Test ; \
	../bin/mtest -testlist ${listdir}/testlist2l -noendsummary > \
			test.results 2>&1 ; \
	../bin/mtest -testlist ${listdir}/testlist2-2l -appsummary \
		>>test.results 2>&1 ; \
	../bin/mtest -testlist ${listdir}/testlist4 -np 4 -appsummary \
		>>test.results 2>&1 ; \
	../bin/mtest -testlist ${listdir}/testlist4lg -np 4 -appsummary \
		>>test.results 2>&1 ; \
	../bin/mtest -testlist ${listdir}/testlist6 -np 6 -appsummary \
		-endsummary >>test.results 2>&1 )

# This is newtestl for C only
newtestl_c:
	if [ ! -d Test ] ; then mkdir Test ; fi
	(cd Test ; \
	../bin/mtest -testlist ${listdir}/testlist2l_c -noendsummary > \
			test.results 2>&1 ; \
	../bin/mtest -testlist ${listdir}/testlist4_c -np 4 -appsummary \
		>>test.results 2>&1 ; \
	../bin/mtest -testlist ${listdir}/testlist4lg_c -np 4 -appsummary \
		>>test.results 2>&1 ; \
	../bin/mtest -testlist ${listdir}/testlist6_c -np 6 -appsummary \
		-endsummary >>test.results 2>&1 )

# This is newtestl for Fortran only
newtestl_f:
	if [ ! -d Test ] ; then mkdir Test ; fi
	(cd Test ; \
	../bin/mtest -testlist ${listdir}/testlist2l_f -noendsummary > \
			test.results 2>&1 ; \
	../bin/mtest -testlist ${listdir}/testlist4_f -np 4 -appsummary \
		>>test.results 2>&1 ; \
	../bin/mtest -testlist ${listdir}/testlist4lg_f -np 4 -appsummary \
		>>test.results 2>&1 ; \
	../bin/mtest -testlist ${listdir}/testlist6_f -np 6 -appsummary \
		-endsummary >>test.results 2>&1 )

# This is newtestl for Fortran 90 only
newtestl_f90:
	if [ ! -d Test ] ; then mkdir Test ; fi
	(cd Test ; \
	../bin/mtest -testlist ${listdir}/testlist2l_f_f90 -noendsummary > \
			test.results 2>&1 ; \
	../bin/mtest -testlist ${listdir}/testlist4_f_f90 -np 4 -appsummary \
		>>test.results 2>&1 ; \
	../bin/mtest -testlist ${listdir}/testlist4lg_f_f90 -np 4 -appsummary \
		>>test.results 2>&1 ; \
	../bin/mtest -testlist ${listdir}/testlist6_f_f90 -np 6 -appsummary \
		-endsummary >>test.results 2>&1 )

# test used an old script, mpitest, which is no longer supported 
# (that script requires a separate Makefile in each test directory; the
# script itself is complex and fragile)
test: testing
testl: newtestl
results: 
	(cd Test ; MPITEST_HOME=@MPITEST_HOME@; export MPITEST_HOME ; \
	MPITEST_ARCH=@MPITEST_ARCH@ ; export MPITEST_ARCH ; \
	../bin/mpiresults -testlist ${listdir}/testlist2 ; \
	../bin/mpiresults -testlist ${listdir}/testlist4 -np 4 ; \
	../bin/mpiresults -testlist ${listdir}/testlist6 -np 6 )
	@echo "Results in Test/results.@MPITEST_ARCH@.* . Use"
	@echo "cat Test/results.@MPITEST_ARCH@.* | sed '/^ P/d'"
	@echo "to see which tests did not pass."
#
# This cleans both the library directory and the links to include files
# such as mpitestf.h and mpif.h created while running the tests
# work.pc and work.pcl are files sometimes generated by the Intel 
# Fortran compiler (!)
clean:
	-(cd lib ; make cleanall)
	-if [ -d Test ] ; then (cd Test && \
	for dir in c fortran ; do \
	    for ldir in $$dir/* ; do \
		for lldir in $$ldir/error $$ldir/functional ; do \
		    for fdir in $$lldir/* ; do \
			rm -f $$fdir/makelog.* $$fdir/*_L $$fdir/*_R \
			      $$fdir/node.*_bx $$fdir/LOCK.* $$fdir/*.o \
			      $$fdir/mpitestf.h $$fdir/mpif.h \
			      $$fdir/core $$fdir/core.* \
			      $$fdir/node $$fdir/make.log $$fdir/run.log \
			      $$fdir/log*.*log \
			      $$fdir/work.pc $$fdir/work.pcl \
			      $$fdir/externalf.h $$fdir/mpitest_cfgf.h ;\
		    done ;\
		done ;\
	    done ;\
	done ; ) ; fi
	-rm -f config.log 

distclean: clean
	rm -f bin/Makefile.master bin/mpitest.env bin/mpitest \
		   lib/Makefile Test/c/misc/functional/MPI_pdefs/Makefile \
		   Test/fortran/misc/functional/MPI_pdefs/Makefile \
		   bin/mpitest.${MPITEST_ARCH}.env Makefile config.status
	rm -f lib/lib*.a
	find Test -name Makefile -print | sed 's/^/rm /g' | sh

PACKAGE=IntelMPITEST
VERSION=1.01
dist:
	if [ ! -d tmpdir ] ; then mkdir tmpdir ; fi
	if [ -n "${TAG}" ] ; then \
	(cd tmpdir && \
		svn export -r ${TAG} \
		https://svn.mcs.anl.gov/repos/mpi/test_suites/intel/trunk \
		IntelMPITEST ) ;\
	else \
	(cd tmpdir && \
		svn export \
		https://svn.mcs.anl.gov/repos/mpi/test_suites/intel/trunk \
			IntelMPITEST ) ;\
	fi	
	mv tmpdir/IntelMPITEST tmpdir/${PACKAGE}-${VERSION}
	(cd tmpdir/${PACKAGE}-${VERSION} && autoconf)
	(cd tmpdir && tar cf ${PACKAGE}-${VERSION}.tar ${PACKAGE}-${VERSION} )
	mv tmpdir/${PACKAGE}-${VERSION}.tar .
	-rm -rf tmpdir

# Improved clean target that relies on find
cleannew:
	-find Test -name node -o -name '*.o' -print | xargs rm -f
	-rm -f lib/libmpitest.o lib/libmpitest.a lib/libmpitest_*.a

MPIEXEC   = @MPITEST_MPIEXEC@
MPIEXECNP = @MPITEST_MPIEXEC_NP@
MPICC     = @MPITEST_CC@
MPIF77    = @MPITEST_F77@

# use
#   make byroutine ROUTINE=mpi-routine-name
# to run the tests for ROUTINE, i.e.,
#   make byroutine ROUTINE=MPI_Send
# (will also get MPI_Sendrecv and MPI_Sendinit, but it is pretty close)
# We use *.c to get the reduce.c files for the various reduce tests.
byroutine: lib/libmpitest.a
	@if [ ! -d Test ] ; then mkdir Test ; fi
	@for dir in `grep $(ROUTINE) $(srcdir)/Test/testlist2l_c` ; do \
	    echo "Test $$dir" ; \
	    (cd Test && $(MPICC) -o node -I../include -I$(abs_srcdir)/include \
		$(abs_srcdir)/Test/$$dir/*.c -L../lib -lmpitest -lm ) ; \
	    if [ -x Test/node ] ; then \
		testname=`echo $$dir | sed -e 's%/%-%g'` ; \
		(cd Test && $(MPIEXEC) $(MPIEXECNP) 2 ./node  \
			2>&1 > $$testname.log ); \
	    fi ; \
	done
	@for dir in `grep $(ROUTINE) $(srcdir)/Test/testlist4_c` ; do \
	    echo "Test $$dir" ; \
	    (cd Test && $(MPICC) -o node -I../include -I$(abs_srcdir)/include \
		$(abs_srcdir)/Test/$$dir/*.c -L../lib -lmpitest -lm ) ; \
	    if [ -x Test/node ] ; then \
		testname=`echo $$dir | sed -e 's%/%-%g'` ; \
		(cd Test && $(MPIEXEC) $(MPIEXECNP) 4 ./node  \
			2>&1 > $$testname.log ); \
	    fi ; \
	done
	@for dir in `grep $(ROUTINE) $(srcdir)/Test/testlist6_c` ; do \
	    echo "Test $$dir" ; \
	    (cd Test && $(MPICC) -o node -I../include -I$(abs_srcdir)/include \
		$(abs_srcdir)/Test/$$dir/*.c -L../lib -lmpitest -lm ) ; \
	    if [ -x Test/node ] ; then \
		testname=`echo $$dir | sed -e 's%/%-%g'` ; \
		(cd Test && $(MPIEXEC) $(MPIEXECNP) 6 ./node  \
			2>&1 > $$testname.log ); \
	    fi ; \
	done

# byroutinef is like byroutine, but for the Fortran tests
byroutinef: lib/libmpitestf.a
	if [ ! -d Test ] ; then mkdir Test ; fi
	for dir in `grep $(ROUTINE) $(srcdir)/Test/testlist2l_f` ; do \
	    echo "Test $$dir" ; \
	    (cd Test && $(MPIF77) @MPITEST_FFLAGS@ -o node -I../include \
		-I$(abs_srcdir)/include \
		$(abs_srcdir)/Test/$$dir/*.F -L../lib -lmpitestf -lm ) ; \
	    if [ -x Test/node ] ; then \
		testname=`echo $$dir | sed -e 's%/%-%g'` ; \
		(cd Test && $(MPIEXEC) $(MPIEXECNP) 2 ./node  \
			2>&1 > $$testname.log ); \
	    fi ; \
	done
	for dir in `grep $(ROUTINE) $(srcdir)/Test/testlist4 | grep fortran` ; do \
	    echo "Test $$dir" ; \
	    (cd Test && $(MPIF77) @MPITEST_FFLAGS@ -o node -I../include \
		-I$(abs_srcdir)/include \
		$(abs_srcdir)/Test/$$dir/*.F -L../lib -lmpitestf -lm ) ; \
	    if [ -x Test/node ] ; then \
		testname=`echo $$dir | sed -e 's%/%-%g'` ; \
		(cd Test && $(MPIEXEC) $(MPIEXECNP) 4 ./node  \
			2>&1 > $$testname.log ); \
	    fi ; \
	done
	for dir in `grep $(ROUTINE) $(srcdir)/Test/testlist6_f` ; do \
	    echo "Test $$dir" ; \
	    (cd Test && $(MPIF77) @MPITEST_FFLAGS@ -o node -I../include \
			-I$(abs_srcdir)/include \
		$(abs_srcdir)/Test/$$dir/*.F -L../lib -lmpitestf -lm ) ; \
	    if [ -x Test/node ] ; then \
		testname=`echo $$dir | sed -e 's%/%-%g'` ; \
		(cd Test && $(MPIEXEC) $(MPIEXECNP) 6 ./node  \
			2>&1 > $$testname.log ); \
	    fi ; \
	done

#
# This target lets you build a single test program.  Use
#   make testname=name node
# where the test name is the directory path after the Test, e.g.,
#   make testname=c/blocking/error/MPI_Bsend_err1
node: dummy-target
	@if [ -z "$(testname)" ] ; then \
	    echo "Give the test name with make testname=name" ; exit 1; \
	fi
	@if [ -s $(srcdir)/Test/$(testname)/node.c ] ; then \
	  echo $(MPICC) -o node -Iinclude -I$(srcdir)/include $(srcdir)/Test/$(testname)/*.c -Llib -lmpitest -lm ; \
	  $(MPICC) -o node -Iinclude -I$(srcdir)/include $(srcdir)/Test/$(testname)/*.c -Llib -lmpitest -lm ; \
	elif [ -s $(srcdir)/Test/$(testname)/node.F ] ; then \
	  echo $(MPIF77) @MPITEST_FFLAGS@ -o node -Iinclude -I$(srcdir)/include $(srcdir)/Test/$(testname)/*.F -Llib -lmpitestf -lm ; \
	  $(MPIF77) @MPITEST_FFLAGS@ -o node -Iinclude -I$(srcdir)/include $(srcdir)/Test/$(testname)/*.F -Llib -lmpitestf -lm ; \
	else \
	  echo "Could not find test $(testname) in $(srcdir)/Test" ; exit 1 ; \
	fi

dummy-target:

lib/libmpitest.a: lib/libmpitest.c
	cd lib && \
		$(MPICC) @MPITEST_CFLAGS@ -c \
			-I../include -I$(abs_srcdir)/include \
			$(abs_srcdir)/lib/libmpitest.c && \
		@MPITEST_AR@ cr libmpitest.a libmpitest.o
	if test -n "@MPITEST_RUN_RANLIB@" ; then \
	    cd lib && @MPITEST_RANLIB@ libmpitest.a ; \
	fi
lib/libmpitestf.a: lib/libmpitestf.F
	cd lib && $(MPIF77) @MPITEST_FFLAGS@ -c \
			-I../include -I$(abs_srcdir)/include \
			$(abs_srcdir)/lib/libmpitestf.F && \
		@MPITEST_AR@ cr libmpitestf.a libmpitestf.o
	if test -n "@MPITEST_RUN_RANLIB@" ; then \
	    cd lib && @MPITEST_RANLIB@ libmpitestf.a ; \
	fi

# The compile-all target may be used to check that all of the programs 
# build with a given MPI implementation, and, if extra compiler warnings are
# enabled, generate a list of possible compilation issues (such as mismatched
# format statements as well as unused variables).
# If you are using the GNU compilers, consider adding the flag
#  -Wno-unused-variable
# to the compilation of C and Fortran, as the tests use a common
# set of declarations, leading to many reports of unused variables.
# For Fortran, you may want to consider
#  -Wall -Wno-unused -Wimplicit
# for g77 and
#  -Wall -Wno-unused -fimplicit-none
# for gfortran
# along with the -Wno-globals that the configure test will add.
compile-all: lib/libmpitest.a lib/libmpitestf.a
	cd Test && for dir in `cat $(abs_srcdir)/Test/testlist` ;  do \
	if [ -s $(abs_srcdir)/Test/$$dir/node.c ] ; then \
	    $(MPICC) @MPITEST_CFLAGS@ -o node \
		-I../include -I$(abs_srcdir)/include \
		$(abs_srcdir)/Test/$$dir/*.c -L../lib -lmpitest -lm ; \
	else \
	    $(MPIF77) @MPITEST_FFLAGS@ -o node \
		-I../include -I$(abs_srcdir)/include \
		$(abs_srcdir)/Test/$$dir/*.F -L../lib -lmpitestf -lm ; \
	fi ; \
	if [ ! -x node ] ; then \
	    echo "Unable to build test in $$dir" ; \
	fi ; \
	rm -f node ; \
	done
