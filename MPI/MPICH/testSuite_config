#!/bin/sh

count=0
name=""
pattern="No errors"
autokill_timeout=180

function check_env()
{
    if test -f /opt/Modules/bin/modulecmd.tcl;
    then
        /opt/Modules/bin/modulecmd.tcl sh list &> test.log
        output=$(cat test.log)
        new_output=`echo "$output" | sed 's/\ //g' | sed -r 's/[0-9]+\)/\n/g'`
        for line in `echo "$new_output"`; 
        do
            if test `echo "$line" | grep -i "mkl"`;
            then
                echo "there is already an mpi module loaded ! in module '$line'" 1>&2
                echo -n "getting rid of it..." 1>&2
                export_var=$(/opt/Modules/bin/modulecmd.tcl sh unload "$line")
                eval "$export_var"
                echo "done." 1>&2
            fi

            if test `echo "$line" | grep -i "mpi"`; 
            then
                echo "there is already an mpi module loaded ! in module '$line'" 1>&2
                echo -n "getting rid of it..." 1>&2
                export_var=$(/opt/Modules/bin/modulecmd.tcl sh unload "$line")
                eval "$export_var"
                echo "done." 1>&2
            fi
        done
    fi  
}

function configure()
{
    echo -n "   --> Configuring MPICH... " 1>&2
    ${PCVS_CSOURCE_DIR}/configure CC="mpc_cc -include mpc.h -g" CXX="mpc_cxx -include mpc.h -g" F77="mpc_f77 -include mpc.h -g" --disable-maintainer_mode --enable-threads=multiple --enable-strictmpi &> ${PCVS_CSOURCE_DIR}/configure.log
    if test "$?" -ne 0 ; 
    then
        echo "Error !" 1>&2
        echo "Try checking module list and removing mpi" 1>&2
        exit 0
    else
        echo "done." 1>&2
    fi  
}

common_insert_test "compile_MPICH" "0" "make -C ${PCVS_CWORK_DIR}&& make install -C ${PCVS_CWORK_DIR}"

function copy()
{
    echo -n "   --> Copying list of tests... " 1>&2
    for file in `find ${PCVS_CSOURCE_DIR}/ -name "testlist"`;
    do  
        new_dest=`echo ${file} | sed 's|'${PCVS_CSOURCE_DIR}'||'`
        cp -f ${file} ${PCVS_CWORK_DIR}/${new_dest}
    done
    echo "done." 1>&2
}

function building()
{
    echo -n "   --> Building list of tests... " 1>&2
    ./runtests -batch -mpiexec=mpcrun -tests=testlist &> /dev/null
    echo "done." 1>&2
}

function processing()
{
    while read line
    do
        if test "${count}" == 0;
        then
            command=`echo ${line} | cut -f 2 -d ' '`
            autokill_timeout=`echo ${command} | cut -f 2 -d '='`
        elif test "${count}" == 1;
        then
            name=`echo ${line} | cut -f 1 -d '>' | cut -f 6 -d ' ' | sed 's/.\///'`
        elif test "${count}" == 2;
        then
            command=`echo ${line} | cut -f 1 -d '>'`
            launcher=`echo ${command} | cut -f 1 -d ' '`
            tasks=`echo ${command} | cut -f 3 -d ' '`
            name_exe=`echo ${name}`
            name_test="${name}"
            if test "${tasks}" == 1;
            then
                MPC_PROC_NB_LIST="1"
            else
                MPC_PROC_NB_LIST="1 2"
            fi
            for net in ${MPC_NET_LIST}
            do
                for thread in ${MPC_THREAD_LIST}
                do
                    for proc in ${MPC_PROC_NB_LIST}
                    do
                        if test ${proc} -le ${tasks};
                        then
                            if test ${proc} -gt ${CLUSTER_MAX_NODE_PER_TEST} -a ${CLUSTER_MAX_NODE_PER_TEST} -ne 0;
                            then
                                nbNodes="-N=$CLUSTER_MAX_NODE_PER_TEST"
                                cores="$(($CLUSTER_MAX_CORES_PER_NODE/($proc/$CLUSTER_MAX_NODE_PER_TEST)))"
                            else
                                nbNodes="-N=$proc"
                                cores="$CLUSTER_MAX_CORES_PER_NODE"
                            fi

                            if [ $proc -eq 1 ] && [ $tasks -eq 1 ] ; then
                              exec_mode="alonebase"
                            elif [ $proc -eq 1 ]; then 
                              exec_mode="taskbase"  
                            elif [ $tasks -eq $proc ]; then
                              exec_mode="procbase"
                            else
                              exec_mode="hybridbase"
                            fi

						#gen options
                            #gen options
                            opts="--clean --autokill=${autokill_timeout} $nbNodes -n=${tasks} --share-node -p=${proc} -net=${net} -m=${thread} -c=$cores"
                            #gen command
                            command="${PCVS_CSOURCE_DIR}/wrapper.sh '${pattern}' '${launcher} ${opts} ${MPCRUN_ARGS} ${PCVS_CWORK_DIR}/${name_exe} ${COMMAND_OPTIONS}'"
                            #insert test
                            common_insert_test "test_MPICH_${name_test}_${thread}_${exec_mode}_${net}_proc_nb_${proc}_${tasks}" "${EXPECTED_EXIT_CODE}" "$command" "compile_MPICH"
                        fi
                    done
                done
            done
        fi

        if test "${count}" == 3;
        then
            count=0
        else
            count=$((${count}+1))
        fi
    done <runtests.batch
}

check_env
configure
copy
building
processing

