---
#########################################################################################
#########################################################################################
# Test Expression Template
#########################################################################################
#########################################################################################
#
# This file intends to gather all existing values which can be used to build test 
# expressions. We want to give the best possible customization. If you think a mandatory
# piece of information cannot be forwarded to built test, please let us know.
#
# A Test Expression defines rules to build one or more tests from it. This way, you can
# basically specify a binary name (ex simple_TE), ready to be validated through the 
# system for any system-configured combination. If the system is configured to iterate
# over nnode [1,2] and nproc [2, 4], the simplest test Expression (just a name) will generate 4 test 
# combinations: (1, 2), (1, 4), (2, 2) and (2, 4). To decribe a Test Expression, we rely
# on YAML description, where the root value for each element depicts the Test Expression name.
# The effective test name will be generated depending on the number of iterators applied
# to it. In the example above, we could have the following tests:
#     - (1, 2) --> simple_TE_node1_proc2
#     - (1, 4) --> simple_TE_node1_proc4
#     - (2, 2) --> simple_TE_node2_proc2
#     - (2, 4) --> simple_TE_node2_proc4
# A Test Expression (TE) provides a way of factorize information, to build a more 
# powerful and robust validation with less effort.
#
# Any Test Expression needs at least a name. By default, the system will try to find a 
# source file with the same name and will be build a binary named "$name.bin". However,
# we discourage to use targets this way, extending test building time significantly.
#
# You can use some macros to refer absolute path:
#   - @SRCPATH@ : points to the current source directory (where this file is located)
#   - @BUILDPATH@ : points to the current build directory ( under $buildir)
#
# TE = Test Expression

#########################################################################################
# Basic Expressions
#########################################################################################

# TE describing a simple file to compile and launch
simple_compilation_and_run:
        # type COMPLETE : Compilation & Execution (DEFAULT VALUE if nothing specified)
        type: "complete"
        # File to compile : SRCPATH refers to current src directory
        files: "@SRCPATH@/main.c"
        # binary name to build, prepended by @BUILDPATH@
        bin: "compilation_and_run.bin"
        # test args
        args: "-iter 100"
        # change dir before running the command (prefixed w/ build path)
        chdir: 'examples/'
        # reference time to result, in seconds (can be float)
        time: 100.00
        # max allowed gap above which a TE is considered failed (if T > time + tolerance)
        tolerance: 2.5
        # timeout before being potentially killed by the runtime (in seconds)
        timeout: 110
        # expected returned code by tests (0 by default)
        returns: 0

# TE describing binary building step only.
simple_compilation:
        # in this case, the test type is "build". No binary execution.
        type: "build"
        # path to files to compiles
        files: '@SRCPATH@/file_to_compile.c'
        # binary name (prependend as explained above)
        bin: 'simple_compilation.bin'
        cargs: "-g -O0"

# TE describing binary building step only
# "bin" field is not used here. As targets are handled by the Makefile
simple_makefile_compilation:
        # in this case, the test type is "build". No binary execution.
        type: "build"
        # path to files to compiles
        files: '@SRCPATH@/makefile_to_use'
        # this argument presence triggers the compilation into Makefile Expression.
        # This means that "files" value refers to Makefile path and the compilation
        # will be run like: 'make -C `dirname $files` -f `basename $files` $target.
        # If this field is not defined, the standard compilation through ${CC} prevails
        target: "all"

# TE describing test execution only.
simple_run:
        # in this case, the TE type is 'run', requiring no previous compilation
        type: "run"
        # in this mode, this field is completely ignored
        files: ''
        # the executable to launch
        bin: "@SRCPATH@/run_tests.sh"


#########################################################################################
# Combination alteration
#########################################################################################
# We will describe how to avoid a test combination to be generated from a TE if
# the user consider a specific combination as invalid (for example, the test require a square
# number of processors, etc...).
simple_test:
        n_mpi: ~
        n_mpi: null

simple_test:
        n_mpi: [1, 2, 3, 4, 5, 6, 7, 8, 9]
        n_mpi: ["1-9"]
        n_mpi: ["1:9:+1"]

simple_test:
        n_mpi: [2, 4, 6, 8, 10, 12]
        n_mpi: [ "2:12:+2" ]

simple_test:
        n_mpi: [1, 2, 4, 8, 16]
        n_mpi: ["1:16:*2"]

simple_test:
        n_mpi: [1, 4, 9, 16, 25, 36, 49]
        n_mpi: [ "1:50:^2"]


simple_test:
        n_mpi: [1, 8, 27, 64, 125, 216]
        n_mpi: [ "1:216:^3"]

#suppose sysconf->{n_mpi} = [ "2-10" ]
simple_test: 
        n_mpi: [1, 4, 5, 6, 7]
        n_mpi: [1, ">=4", '<=7']
        n_mpi: [1, "> 3", '< 8']



#########################################################################################
# Dependencies
#########################################################################################
# TE marked with "build" type won't be unfolded by following the combinatory system. Indeed,
# number of nodes or processors does not affect the compilation step. However, the TE based
# on "compile-and-run" will build the binary once per test. This is wasteful if your wish is
# running multiple times the same binary with varying parameters. That's why we handle
# dependencies.

# "build" type TE
compile_make:
        # ... We assume you know how to fill this TE with what we showed earlier.
        type: "build"
        files: "@SRCPATH@/Makefile.test"
        target: "TEST-1"
        cargs: "VERBOSE=1"

# This TE will provide a new field: "deps", an array containing a list of names 
# This dependcy does not only allow to build the binary once, but also ensure that deps 
# will be successfully run before executing tests from this TE. 
run_target:
        # ... We assume you know how to fill this TE with what we showed earlier.
        deps: [ "compile_make" ]
        limit: 100
        tolerance: 5
        args: "--run-args"
        iter: ["nnode", "nproc", "ncore"]
        nnode: [1, 2]
        nproc: [4, 8]
        returns: 0

#########################################################################################
# Templating
#########################################################################################
# This final section describe a way to make TE writing more dense, avoiding redundant text,
# easing validation updates. Template TE won't be executed at all, and exist just to be 
# included into other TEs.
# IMPORTANT: To be recognized, a template TE, should have its name starting by "pcvst_",
# this is mandatory to avoid adding an extra field inside the TE (making the process heavier).
#
# This feature is still experimental and only allow one level of templating. We don't support
# (and don't want to support) template's template (and so on).

# Similarly to dependencies, templates expose a label
pcvst_random_name: &model
        type: "run"
        deps: [ "compilemake1" ]
        bin: "TEST-1.bin" 
        time: 100
        tolerance: 2

no_stress_test:
        # the field "herited" attach the template TE to the current TE definition.
        herit : *model
        args: '-iter 100 -cache off'

very_stressful_test:
        herited : *model
        args: '-iter 10000 -cache on'

# In case you don't have any extra fields compared to the template, the two following
# definitions are equivalent.
basic_test: 
        herited: *wildcard

test1:


basic_test2: *wildcard
