#!/usr/bin/perl

use strict;
use warnings;
#use diagnostics;
use 5.012;
use English qw( -no_match_vars );

###########################################################################
#### major vars
###########################################################################
my %configuration;
my $srcdir;
my $internaldir;
my $buildir;
my $rundir;

###########################################################################
#### COMPILATION TIME
###########################################################################
BEGIN {
	$srcdir = `readlink -e \`dirname $0\``; chomp $srcdir;
	$internaldir = $srcdir."/build_scripts";
}

#third-party libs loading
use lib "$srcdir/build_scripts/modules";

# dep inclusions
use File::Tee "tee"; # get the output sync'd w/ a file
#use PCVS::Vars;
#use PCVS::Configuration;
use File::Path;
use File::chdir;
use Sys::Hostname;
use JSON; #parse JSON string into hash object
use File::Copy::Recursive qw(fcopy dircopy pathempty);
use Getopt::Long;    # parsing options
use Sys::Hostname;   # get current Hostname
use Data::Dumper; #to help printing hashes (can be removed)

###########################################################################
#### FUNCTIONS
###########################################################################
sub sec_to_dhms {
	my $t = shift;
	return int($t / 86400), (gmtime($t))[2, 1, 0];
}

sub clean_path
{
	my ($path,$with_clean) = @_;
	mkpath($path) if (! -d $path);
	(print " * Cleaning $path\n" and pathempty($path)) if ($with_clean); 
}

sub list_compilers
{
	opendir(my $dirlist, "$internaldir/configuration/compilers");
	return grep(s/\.conf$//, readdir($dirlist));
}

sub list_runtimes
{
	opendir(my $dirlist, "$internaldir/configuration/runtimes");
	return grep(s/\.conf$//, readdir($dirlist));
}

sub list_configs
{
	opendir(my $dirlist, "$internaldir/environment");
	return grep(s/\.json$//, readdir($dirlist));
}

sub list_avail_directories
{
	opendir(my $dirlist, "$srcdir");
	return grep { -d "$srcdir/$_" and /^(MPI|OpenMP|performance|reproducers|thread-engines|Threads)/} readdir($dirlist);
}

sub print_help
{
	print "Usage: ./run_validation.pl [-h] [--select=/dirs]\n";
	exit(0);
}

sub print_summary
{
	my $config_target = "\'default\'";
	$config_target .= " & \'$configuration{'config-target'}\'" if(exists $configuration{'config-target'});
	print "\n >>>>>>>>>>>>>>>>>>>>> GLOBAL INFOS (see \$buildir/config.json) <<<<<<<<<<<<<<<<<<\n";
	print "      - Run Start date   : ".localtime()."\n";
	print "      - Host name        : ".hostname."\n";
	print "      - Source directory : $configuration{'src'}\n";
	print "      - Build directory  : $configuration{'build'}\n";
	print "      - Loaded Config.   : $config_target\n";
	print "      - Loaded Runtime   : \'$configuration{'runtime-target'}\'\n";
	print "      - Loaded Compiler  : \'$configuration{'compiler-target'}\'\n";
	print "      - Test directories : ".join(", ", @{ $configuration{'select'} } )."\n";
}

sub trap_signal
{
	print "Stopped by receiving a signal.\n";
	#my @process_list = grep(/[0-9]*/, `ps -o ppid=$$ | sort | uniq`);
	#if(scalar @process_list)
	#{
	#kill('KILL', @process_list);
	#}
	exit(127);
}

sub retrieve_user_configuration
{
	my $prefix = "$internaldir/environment";
	my $name = lc(hostname);
	my $user_name = $configuration{'config-target'};
	my @avail_names = list_configs();

	if(not defined $user_name)
	{
		if (grep(/^$name$/, @avail_names))
		{
			$configuration{'config-target'} = $name;
			return "$prefix/$name.json";
		}
		
		$name =~ s/[0-9]*//g;
		if(grep(/^$name$/, @avail_names))
		{
			$configuration{'config-target'} = $name;
			return "$prefix/$name.json";
		}
	}
	else
	{
		die("Bad configuration value : $configuration{'config-target'} !") if (!grep(/^$user_name$/, @avail_names));
		return "$prefix/$user_name.json";
	}

	return undef;
}

sub validate_run_configuration
{
	my $current_field;

	$current_field = $configuration{'validation'}{'run_wrapper'};
	(!$current_field or (-f "$internaldir/launchers/$current_field.sh")) or die("\'validation/run_wrapper = $current_field\' is INVALID from configuration: $!");

	$current_field = $configuration{'validation'}{'compil_wrapper'};
	(!$current_field or (-f "$internaldir/launchers/$current_field.sh")) or die("\'validation/compil_wrapper = $current_field\' is INVALID from configuration: $!");

	$current_field = $configuration{'compiler-target'};
	(!$current_field or (-f "$internaldir/configuration/compilers/$current_field.json")) or die("\'compiler/target = $current_field\' is INVALID from configuration: $!");

	$current_field = $configuration{'runtime-target'};
	(!$current_field or (-f "$internaldir/configuration/runtimes/$current_field.json")) or die("\'runtime/target = $current_field\' is INVALID from configuration: $!");

	$current_field = $configuration{'validation'}{'nb_workers'};
	($current_field ge 0) or die("\'validation/nb_workers = $current_field\' is INVALID from configuration: Value must be positive");

	$current_field = $configuration{'cluster'}{'max_nodes'};
	($current_field ge 0) or die("\'cluster/max_nodes = $current_field\' is INVALID from configuration: Value must be strictly positive");

	$current_field = $configuration{'validation'}{'worker_mintime'};
	($current_field ge 0) or die("\'validation/worker_mintime = $current_field\' is INVALID from configuration: Value must be positive");

	$current_field = $configuration{'validation'}{'worker_maxtime'};
	($current_field ge 0) or die("\'validation/worker_mintime = $current_field\' is INVALID from configuration: Value must be positive and higher than validation/worker_mintime");

	$current_field = $configuration{'validation'}{'sched_policy'};
	($current_field ge 0 and $current_field le 2) or die("\'validation/sched_policy = $current_field\' is INVALID from configuration: Value must be in range 0..2");


	if(!$configuration{'select'})
	{
		push @{$configuration{'select'}}, list_avail_directories() if(!$configuration{'select'});
	}
	
	foreach my $el(@{$configuration{'select'}})
	{
		die("\'SRCDIR/$el\' does not exist ! (see --user-testfiles instead)") if(! -d "$srcdir/$el");
	}

	if($configuration{'user-testfiles'})
	{
		foreach my $el(@{$configuration{'user-testfiles'}})
		{
			if(! ($el =~ /^\/.*$/))
			{
				$el = $rundir."/".$el;
			}

			die("Unable to find \'$el\' !") if(! -f $el);
		}
	}
}

sub dump_and_parse_json
{
	my ($json_path) = @_;

	die("Error with $json_path: $!") if(! -f $json_path);

	local $/ = undef;
	open(my $stream, '<', $json_path) or die "Error with $json_path: $!";

	return %{ decode_json(<$stream>) };
}

sub iterate_sub_configuration
{
	my $output_file = shift;
	my $hashref = shift;
	my $key = shift;

	foreach my $k (keys %{$hashref})
	{
		if(ref(${$hashref}{$k}) eq "HASH")
		{
			iterate_sub_configuration($output_file, ${$hashref}{$k}, "${key}_${k}");
		}
		elsif(ref ${$hashref}{$k} eq "ARRAY")
		{
			print $output_file "${key}_${k}_list=\"".join(" ", @{${$hashref}{$k}})."\"\n";
		}
		else
		{
			print $output_file "${key}_${k}=\"${$hashref}{$k}\"\n";
		}
	}
}

sub dump_run_configuration
{
	# build JSON
	my $output_file;
	open($output_file, '>', "$buildir/config.json") || die("Unable to write JSON configuration file !");
	print $output_file encode_json(\%configuration);
	close($output_file);
	
	# build ENV
	open($output_file, '>', "$buildir/config.env") || die("Unable to write Shell-compliant configuration file !");
	iterate_sub_configuration($output_file, \%configuration, "pcvs");
	close($output_file);
}



sub build_current_configuration
{

	my $default_config = "$internaldir/environment/default.json";
	my %default_data = dump_and_parse_json ("$default_config");

	#update the current configuration hash with default value (no overlap w/ options)
	foreach my $key (keys %default_data){
		$configuration{$key}  = $default_data{$key} if(!exists $configuration{$key});
	}

	my $user_config = retrieve_user_configuration();

	#if the user config file exists
	if(defined $user_config)
	{
		my %user_data = dump_and_parse_json($user_config);

		#update default config with overriden values
		foreach my $key(keys %user_data)
		{
			exists $configuration{$key} or die("\'$key\' object does not exist. Please edit your configuration file !");
			#iterate over subkeys to update (JSON data is a two-level tree, should be extended to n-level tree).
			if(ref($configuration{$key} eq 'HASH'))
			{
				foreach my $subkey (keys $user_data{$key})
				{
					exists $configuration{$key}{$subkey} or die("\'$key/$subkey\' object does not exist. Please edit your configuration file !");
					$configuration{$key}{$subkey} = $user_data{$key}{$subkey};
				}
			}
		}
	}

	my $target = $configuration{'compiler-target'};
	if($target)
	{
		delete $configuration{'compiler-target'};
		my $cc_config = "$internaldir/configuration/compilers/$target.json";
		die("Unable to find $target as Compiler target (compiler-target)") if(! -f $cc_config);
		my %cc_data = dump_and_parse_json($cc_config);
		$configuration{'compiler'} = \%cc_data;
		$configuration{'compiler'}{'target'} = $target;
	}
	else
	{
		die("You must specify a Compilation target (compiler/target)");
	}

	$target = $configuration{'runtime-target'};
	if($target)
	{	
		delete $configuration{'runtime-target'};
		my $run_config = "$internaldir/configuration/runtimes/$target.json";
		die("Unable to find $target as Runtime target (runtime-target)") if(! -f $run_config);
		my %run_data = dump_and_parse_json($run_config);
		$configuration{'runtime'} = \%run_data; 
		$configuration{'runtime'}{'target'} = $target;
	}
	else
	{
		die("You must specify a Runtime target (runtime/target)");
	}

	validate_run_configuration();

	dump_run_configuration();

}

sub prepare_run
{
	print "\n >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> PRE-RUN STEP <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n";
	#copy the webview in target dir
	print ' * Building the Webview (reachable at $buildir/webview//index.html)'."\n";
	dircopy("$internaldir/generation/jchronoss/tools/webview/*", "$buildir/") or die("Unable to copy the webview: $!");
	my $var = `$buildir/webview_gen_all.sh --skeleton`;
	#copy jsloc
	print " * Saving JsLoc into build directory.\n";
	dircopy("$internaldir/generation/jchronoss/tools/jsLoc/*", "$buildir/") or die("Unable to copy JsLoc: $!");

	#build JCHRONOSS
	print " * Building JCHRONOSS (-j$configuration{j})\n";
	clean_path("$buildir/tmp/build", 0);
	{
		local $CWD = "$buildir/tmp/build"; # equivalent to chdir()
		`cmake $internaldir/generation/jchronoss -DCMAKE_INSTALL_PREFIX=$buildir/tmp && make -j$configuration{'j'} install`;
	}
	clean_path("$buildir/tmp/traces", 1);
}

sub finalize_run
{

	print "\n >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> POST-RUN STEP <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n";
	#remove colors sequences
	#copy banners
	dircopy("$internaldir/resources/banners", "$buildir/banners");

	#generate tarball
	unlink("$buildir/last_results.tar.gz");

	#copy the generated webview
	clean_path("$buildir/last_results", 1);
	dircopy("$buildir/webview", "$buildir/last_results/webview") or die("Unable to save the webview in the archive !");
	fcopy("$buildir/webview_gen_all.sh", "$buildir/last_results/") or die("Unable to copy webview_gen_all.sh !");
	dircopy("$buildir/jsLoc", "$buildir/last_results/jsLoc") or die("Unable to save JsLoc in the archive !");
	fcopy("$buildir/jsLoc_gen_all.sh", "$buildir/last_results/jsLoc_gen_all.sh") or die("Unable to save JsLoc_gen_all.sh in the archive !");
	fcopy("$buildir/config.json", "$buildir/last_results/") or die ("Unable to save the configuration file !");
	dircopy("$buildir/tmp/traces", "$buildir/last_results/") or die ("Unable to copy trace files !");

	clean_path("$buildir/last_results/test_suite", 1);
	{
		local $CWD = "$buildir/last_results/test_suite/";
		my @list_files = `find $buildir/test_suite/ -iname 'output*.xml' 2> /dev/null`; chomp @list_files;
		foreach my $res_file(@list_files)
		{
			(my $new_path = $res_file) =~ s@$buildir@$buildir/last_results@;
			my $path = `dirname $new_path`; chomp $path;

			mkpath($path) if (! -d $path);
			fcopy($res_file, $path);
		}
	}

	print " * End Date : ".localtime()."\n";
	fcopy("$buildir/output.log", "$buildir/last_results/") if(exists $configuration{'log'});

	print " * Creating the archive (located at $buildir/last_results.tar.gz)\n";
	{
		local $CWD = $buildir;
		`tar -czf $buildir/last_results.tar.gz last_results`;
	}
}

sub configure_run
{
	print "\n >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> BUILD STEP <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n";
	clean_path("$buildir/test_suite", 1);
	print " * Building list_of_tests.xml\n";
	foreach my $path (@{ $configuration{'select'}})
	{
		system("$internaldir/generation/gen_list_of_tests $path");
	}
}

sub run
{	
	print "\n >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> RUN STEP <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n";
	my $nb_resources = "";
	my $nb_workers = "";
	my $compil_w ="";
	my $run_w = "";
	my $autokill = "";
	my $wlist = "";
	my $blist = "";
	my $verbosity = "";
	my $policy = "";
	my $maxjobt = "";
	my $max_workert = "";
	my $min_workert = "";
	my $rc_on_fail = "";
	my $user_testfiles ="";
	my $test_files ="";

	$nb_resources = $configuration{'cluster'}{'max_nodes'};
	$nb_workers = $configuration{'validation'}{'nb_workers'};;
	$autokill = ("--autokill=$configuration{'validation'}{'autokill'}") if ($configuration{'validation'}{'autokill'} > 0);
	$run_w = ("--launcher=$internaldir/launcher/$configuration{'validation'}{'run_wrapper'}.sh") if ($configuration{'validation'}{'run_wrapper'});
	$compil_w = ("--compil-launcher=$internaldir/launcher/$configuration{'validation'}{'compil_wrapper'}.sh") if ($configuration{'validation'}{'compil_wrapper'});
	$compil_w = ("--compil-launcher=$internaldir/launcher/$configuration{'validation'}{'compil_wrapper'}.sh") if ($configuration{'validation'}{'compil_wrapper'});
	$compil_w = ("--compil-launcher=$internaldir/launcher/$configuration{'validation'}{'compil_wrapper'}.sh") if ($configuration{'validation'}{'compil_wrapper'});
	$verbosity = "--verbosity=$configuration{'verbose'}";
	$policy = "--policy=$configuration{'validation'}{'sched_policy'}";
	$maxjobt = "--maxt-job=$configuration{'validation'}{'job_meantime'}";
	$max_workert = "--maxt-slave=$configuration{'validation'}{'worker_maxtime'}";
	$min_workert = "--mint-slave=$configuration{'validation'}{'worker_mintime'}";
	$rc_on_fail = "--expect-success" if ($configuration{'validation'}{'expect-success'});
	$user_testfiles = join(" ", @{$configuration{'user-testfiles'}}) if (exists $configuration{'user-testfiles'});

	my @list = `find $buildir/test_suite/ -name 'list_of_tests.xml'`; chomp @list;
	$test_files = join(" ", @list);

	my $command = "$buildir/tmp/bin/jchronoss --nb-resources=$nb_resources --nb-slaves=$nb_workers --build=$buildir/tmp $run_w $compil_w $autokill $verbosity $policy $max_workert $min_workert $rc_on_fail $maxjobt $test_files $user_testfiles";

	print($command."\n");
	#system($command);
	my $ret = $?;
	if($ret ne 0 and $rc_on_fail)
	{
		print "Aborting Validation due to failed results (expect-success requirement)\n";
		exit $ret;
	}
}


###########################################################################
#### MAIN
###########################################################################
$SIG{INT} = "trap_signal";
$rundir = $CWD;

##### DEFAULT VALUES
$configuration{"j"} = 1;
$configuration{'regen'} = 1;
$configuration{'src'} = $srcdir;
$configuration{'build'} = $srcdir."/build";
$configuration{'verbose'} = 0;


GetOptions (
	\%configuration,
	"config-target=s",
	"list-configs|lco",
	"build=s",
	"select=s@",
	"list-directories",
	"compiler-target=s",
	"runtime-target=s",
	"j:i" ,
	"log!",
	"list-runtimes|lr",
	"list-compilers|lc",
	"user-testfiles=s@",
	"regen!",
	"color|c",
	"clean",
	"expect-success",
	"verbose:i",
	"help"
)  or die("Abort due to error(s) while parsing arguments (see --help)!\n");

$_ = $configuration{'build'};
if(/^[^\/].*$/) #check if relative path to prepend it with $CWD
{
	$configuration{'build'}	= "$CWD/".$configuration{'build'};
}
$buildir = $configuration{'build'};

#check special cases (no validation run)
print_help() if ($configuration{help});
if ($configuration{'list-compilers'})
{
	print "Compilers: ".join(", ", list_compilers())."\n";
	exit(0);
}

if ($configuration{'list-runtimes'})
{
	print "Runtimes: ".join(", ", list_runtimes())."\n";
	exit(0);
}

if ($configuration{'list-configs'})
{
	print "Environments: ".join(", ", list_configs())."\n";
	exit(0);
}

if ($configuration{'list-directories'})
{
	print "Available root directories: ".join(", ", list_avail_directories())."\n";
	exit(0);
}


my $validation_start = time();

#create build directory and create a tee file if logging is enabled
clean_path($buildir, 0);
tee(STDOUT, '>', "$buildir/output.log") if (!exists $configuration{'log'} || $configuration{'log'});

build_current_configuration();

my $banner = `cat $internaldir/resources/banners/test_suite_banner`;
print $banner;

print_summary();

prepare_run();
configure_run() if($configuration{'regen'});
run();
finalize_run();

my ($d, $h, $m, $s) = sec_to_dhms(time()-$validation_start);
print "\n==> Validation completed in $d day(s), $h hour(s), $m minute(s) and $s second(s))\n";
